"""prod db init

Revision ID: 4dab5b998bda
Revises: 
Create Date: 2025-04-22 22:01:43.164707

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4dab5b998bda'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('list',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(length=16), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_list'))
    )
    op.create_table('problem',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('difficulty', sa.Enum('Easy', 'Medium', 'Hard', 'NA', name='difficulty'), nullable=False),
    sa.Column('starter_code', sa.String(), nullable=False),
    sa.Column('link', sa.String(), nullable=True),
    sa.Column('time_limit', sa.Integer(), nullable=True),
    sa.Column('memory_limit', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_problem'))
    )
    with op.batch_alter_table('problem', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_problem_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_problem_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_problem_updated_at'), ['updated_at'], unique=False)

    op.create_table('user',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('email', sa.String(length=64), nullable=False),
    sa.Column('role', sa.Enum('USER', 'ADMIN', name='userroles'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('email', name=op.f('uq_user_email'))
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_updated_at'), ['updated_at'], unique=False)

    op.create_table('bookmark',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_bookmark_problem_id_problem'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_bookmark_user_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_bookmark')),
    sa.UniqueConstraint('user_id', 'problem_id', name=op.f('uq_bookmark_user_id'))
    )
    with op.batch_alter_table('bookmark', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_bookmark_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_bookmark_updated_at'), ['updated_at'], unique=False)

    op.create_table('list_problem',
    sa.Column('list_id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['list_id'], ['list.id'], name=op.f('fk_list_problem_list_id_list'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_list_problem_problem_id_problem'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('list_id', 'problem_id', name=op.f('pk_list_problem'))
    )
    op.create_table('solution',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('rank', sa.Integer(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_solution_problem_id_problem'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_solution'))
    )
    with op.batch_alter_table('solution', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_solution_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_solution_updated_at'), ['updated_at'], unique=False)

    op.create_table('testcase',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.Column('input', sa.String(), nullable=False),
    sa.Column('output', sa.String(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_testcase_problem_id_problem'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_testcase'))
    )
    with op.batch_alter_table('testcase', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_testcase_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_testcase_updated_at'), ['updated_at'], unique=False)

    op.create_table('topic',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('list_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['list_id'], ['list.id'], name=op.f('fk_topic_list_id_list'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_topic'))
    )
    with op.batch_alter_table('topic', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_topic_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_topic_updated_at'), ['updated_at'], unique=False)

    op.create_table('user_solution',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('has_solved', sa.Boolean(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_user_solution_problem_id_problem'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_user_solution_user_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_solution'))
    )
    with op.batch_alter_table('user_solution', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_solution_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_solution_updated_at'), ['updated_at'], unique=False)

    op.create_table('vote_problem',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('vote_type', sa.Enum('UPVOTE', 'DOWNVOTE', name='votetype'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_vote_problem_problem_id_problem'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_vote_problem_user_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vote_problem')),
    sa.UniqueConstraint('user_id', 'problem_id', name=op.f('uq_vote_problem_user_id'))
    )
    with op.batch_alter_table('vote_problem', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_vote_problem_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_vote_problem_updated_at'), ['updated_at'], unique=False)

    op.create_table('submission',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('status', sa.Enum('Accepted', 'Rejected', 'Pending', 'TimeLimit', name='status'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.Column('user_solution_id', sa.Uuid(), nullable=False),
    sa.Column('passed_testcases', sa.Integer(), nullable=False),
    sa.Column('total_testcases', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_submission_problem_id_problem')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_submission_user_id_user'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_solution_id'], ['user_solution.id'], name=op.f('fk_submission_user_solution_id_user_solution')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_submission'))
    )
    with op.batch_alter_table('submission', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_submission_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_submission_updated_at'), ['updated_at'], unique=False)

    op.create_table('topic_problem',
    sa.Column('topic_id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_topic_problem_problem_id_problem'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['topic_id'], ['topic.id'], name=op.f('fk_topic_problem_topic_id_topic'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('topic_id', 'problem_id', name=op.f('pk_topic_problem'))
    )
    op.create_table('vote_solution',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('vote_type', sa.Enum('UPVOTE', 'DOWNVOTE', name='votetype'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.Column('solution_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_vote_solution_problem_id_problem'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['solution_id'], ['solution.id'], name=op.f('fk_vote_solution_solution_id_solution'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_vote_solution_user_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vote_solution')),
    sa.UniqueConstraint('user_id', 'solution_id', name=op.f('uq_vote_solution_user_id'))
    )
    with op.batch_alter_table('vote_solution', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_vote_solution_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_vote_solution_updated_at'), ['updated_at'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('vote_solution', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_vote_solution_updated_at'))
        batch_op.drop_index(batch_op.f('ix_vote_solution_created_at'))

    op.drop_table('vote_solution')
    op.drop_table('topic_problem')
    with op.batch_alter_table('submission', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_submission_updated_at'))
        batch_op.drop_index(batch_op.f('ix_submission_created_at'))

    op.drop_table('submission')
    with op.batch_alter_table('vote_problem', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_vote_problem_updated_at'))
        batch_op.drop_index(batch_op.f('ix_vote_problem_created_at'))

    op.drop_table('vote_problem')
    with op.batch_alter_table('user_solution', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_solution_updated_at'))
        batch_op.drop_index(batch_op.f('ix_user_solution_created_at'))

    op.drop_table('user_solution')
    with op.batch_alter_table('topic', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_topic_updated_at'))
        batch_op.drop_index(batch_op.f('ix_topic_created_at'))

    op.drop_table('topic')
    with op.batch_alter_table('testcase', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_testcase_updated_at'))
        batch_op.drop_index(batch_op.f('ix_testcase_created_at'))

    op.drop_table('testcase')
    with op.batch_alter_table('solution', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_solution_updated_at'))
        batch_op.drop_index(batch_op.f('ix_solution_created_at'))

    op.drop_table('solution')
    op.drop_table('list_problem')
    with op.batch_alter_table('bookmark', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_bookmark_updated_at'))
        batch_op.drop_index(batch_op.f('ix_bookmark_created_at'))

    op.drop_table('bookmark')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_updated_at'))
        batch_op.drop_index(batch_op.f('ix_user_created_at'))

    op.drop_table('user')
    with op.batch_alter_table('problem', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_problem_updated_at'))
        batch_op.drop_index(batch_op.f('ix_problem_name'))
        batch_op.drop_index(batch_op.f('ix_problem_created_at'))

    op.drop_table('problem')
    op.drop_table('list')
    # ### end Alembic commands ###
